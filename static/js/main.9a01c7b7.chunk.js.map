{"version":3,"sources":["App.tsx","components/TodosContext.tsx","components/Form.tsx","components/Error.tsx","components/Footer.tsx","components/TodoList.tsx","components/Todos.tsx","index.tsx"],"names":["App","TodosContext","React","createContext","todos","id","title","completed","setTodos","TodosProvider","children","key","initialValue","useState","JSON","parse","localStorage","getItem","value","setValue","newValue","setItem","stringify","useLocalStorage","contextValue","useMemo","Provider","Form","setHasError","setErrorMessage","useContext","inputValue","setInputValue","onSubmit","event","preventDefault","trim","setTimeout","newTodo","Date","type","data-cy","className","placeholder","onChange","currentTarget","Error","errorMessage","removeError","onClick","Footer","filter","useParams","activeTodos","todo","completedTodos","length","to","classNames","selected","TodoList","memo","hasError","isDoubleClickedId","setIsDoubleClickedId","editValue","setEditValue","visibleTodos","sort","a","b","handlerCheckAll","useCallback","editedTodos","map","target","checked","deleteTodo","todoId","newTodos","every","htmlFor","e","t","handleEdit","defaultValue","onBlur","onKeyUp","onDoubleClick","undefined","editedTodo","handleChecked","Todos","ReactDOM","render","path","element","index","document","getElementById"],"mappings":"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","file":"static/js/main.9a01c7b7.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { Outlet } from 'react-router-dom';\n\nexport const App: React.FC = () => {\n  return (\n    <Outlet />\n  );\n};\n","import React, { ReactNode, useMemo, useState } from 'react';\nimport { Todo } from '../types/Todo';\n\ntype ContextValue = {\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n};\n\ntype Props = {\n  children: ReactNode,\n};\n\nconst todosFromServer = [{\n  id: 1,\n  title: 'aboba',\n  completed: false,\n}];\n\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key) || '') || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (newValue: T) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n}\n\nexport const TodosContext = React.createContext<ContextValue>({\n  todos: todosFromServer,\n  setTodos: () => {},\n});\n\nexport const TodosProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useLocalStorage<Todo[]>('todos', []);\n\n  const contextValue = useMemo(() => (\n    {\n      todos,\n      setTodos,\n    }\n  ), [todos]);\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodosContext } from './TodosContext';\n\ntype Props = {\n  setHasError: (value: boolean) => void,\n  setErrorMessage: (value: string) => void,\n};\n\nexport const Form: React.FC<Props> = ({ setHasError, setErrorMessage }) => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [inputValue, setInputValue] = useState('');\n\n  const addTodo = (event: { preventDefault: () => void; }) => {\n    event.preventDefault();\n\n    if (inputValue.trim() === '') {\n      setHasError(true);\n      setErrorMessage('You can\\'t add empty todo');\n\n      setTimeout(() => setHasError(false), 3000);\n\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: +new Date(),\n      title: inputValue,\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setInputValue('');\n  };\n\n  return (\n    <form onSubmit={addTodo}>\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={inputValue}\n        onChange={(event) => {\n          setInputValue(event.currentTarget.value);\n        }}\n      />\n    </form>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  errorMessage: string,\n  removeError: () => void,\n};\n\n/* eslint-disable jsx-a11y/control-has-associated-label */\nexport const Error:React.FC<Props> = ({ errorMessage, removeError }) => {\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className=\"notification is-danger is-light has-text-weight-normal\"\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => {\n          removeError();\n        }}\n      />\n      {errorMessage}\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport { NavLink, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { TodosContext } from './TodosContext';\n\nexport const Footer = () => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const { filter } = useParams();\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${activeTodos.length} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <NavLink\n            to=\"../\"\n            className={classNames('completed',\n              { selected: !filter })}\n          >\n            All\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink\n            to=\"../active\"\n            className={classNames('completed',\n              { selected: filter === 'active' })}\n          >\n            Active\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink\n            to=\"../completed\"\n            className={classNames('completed',\n              { selected: filter === 'completed' })}\n          >\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n\n      {completedTodos.length > 0\n        && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => {\n              setTodos(activeTodos);\n            }}\n          >\n            Clear completed\n          </button>\n        )}\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\nimport React, {\n  useCallback, useContext, useState,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Todo } from '../types/Todo';\nimport { Error } from './Error';\nimport { Footer } from './Footer';\nimport { TodosContext } from './TodosContext';\n\ntype Props = {\n  hasError: boolean,\n  errorMessage: string,\n  setHasError: (value: boolean) => void,\n};\n\nexport const TodoList: React.FC<Props> = React.memo((\n  { hasError, errorMessage, setHasError },\n) => {\n  const { todos, setTodos } = useContext(TodosContext);\n  const [isDoubleClickedId, setIsDoubleClickedId] = useState(-1);\n  const [editValue, setEditValue] = useState('');\n  const { filter } = useParams();\n  let visibleTodos = todos.sort((a, b) => a.id - b.id);\n\n  if (filter) {\n    switch (filter) {\n      case 'active':\n        visibleTodos = todos\n          .filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        visibleTodos = todos\n          .filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const handlerCheckAll = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const editedTodos = todos.map(todo => {\n        const editedTodo = {\n          ...todo,\n          completed: event.target.checked,\n        };\n\n        return editedTodo;\n      });\n\n      setTodos(editedTodos.sort((a, b) => a.id - b.id));\n    },\n    [todos],\n  );\n\n  const deleteTodo = (todoId: number) => {\n    const newTodos = todos.filter(todo => todo.id !== todoId);\n\n    setTodos(newTodos);\n  };\n\n  const handleEdit = (e: React.FormEvent<HTMLFormElement>, todo: Todo) => {\n    e.preventDefault();\n\n    if (editValue.trim() === '') {\n      deleteTodo(todo.id);\n\n      return;\n    }\n\n    const newTodo = {\n      ...todo,\n      title: editValue,\n    };\n\n    const newTodos = todos.filter(t => t.id !== todo.id);\n\n    setTodos([...newTodos, newTodo]);\n    setIsDoubleClickedId(-1);\n  };\n\n  const handleChecked = (\n    event: React.MouseEvent<HTMLInputElement, MouseEvent>, todo: Todo,\n  ) => {\n    const editedTodo = {\n      ...todo,\n      completed: event.currentTarget.checked,\n    };\n    const newTodos = todos\n      .filter(t => t.id !== todo.id);\n\n    setTodos([]);\n    setTodos([...newTodos, editedTodo]);\n  };\n\n  const removeError = () => {\n    setHasError(false);\n  };\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          data-cy=\"toggleAll\"\n          checked={todos.every(todo => todo.completed)}\n          onChange={handlerCheckAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\" data-cy=\"todoList\">\n          {visibleTodos.map((todo: Todo) => (\n            isDoubleClickedId === todo.id\n              ? (\n                <form\n                  onSubmit={(e) => {\n                    handleEdit(e, todo);\n                  }}\n                >\n                  <input\n                    className=\"edit\"\n                    defaultValue={todo.title}\n                    placeholder=\"Empty TODO will be deleted\"\n                    onChange={(e) => {\n                      setEditValue(e.currentTarget.value);\n                    }}\n                    onBlur={() => {\n                      setIsDoubleClickedId(-1);\n                    }}\n                    onKeyUp={event => {\n                      if (event.key === 'Escape') {\n                        setIsDoubleClickedId(-1);\n                      }\n                    }}\n                  />\n                </form>\n              )\n              : (\n                <li\n                  className={classNames({ completed: todo.completed })}\n                  key={todo.id}\n                  onDoubleClick={() => {\n                    setIsDoubleClickedId(todo.id);\n                  }}\n                >\n                  <div className=\"view\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"toggle\"\n                      id=\"toggle-completed\"\n                      checked={todo.completed || undefined}\n                      onClick={(e) => {\n                        handleChecked(e, todo);\n                      }}\n                    />\n                    <label htmlFor=\"toggleview\">\n                      {todo.title}\n                    </label>\n                    <button\n                      type=\"button\"\n                      className=\"destroy\"\n                      data-cy=\"deleteTodo\"\n                      onClick={() => {\n                        deleteTodo(todo.id);\n                      }}\n                    />\n                  </div>\n                  <input type=\"text\" className=\"edit\" />\n                </li>\n              )\n          ))}\n        </ul>\n      </section>\n      <Footer />\n\n      {hasError\n        && <Error errorMessage={errorMessage} removeError={removeError} />}\n    </>\n  );\n});\n","import React, { useContext, useState } from 'react';\nimport { Form } from './Form';\nimport { TodoList } from './TodoList';\nimport { TodosContext } from './TodosContext';\n\nexport const Todos = React.memo(() => {\n  const { todos } = useContext(TodosContext);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form setHasError={setHasError} setErrorMessage={setErrorMessage} />\n      </header>\n      {todos.length > 0\n        && (\n          <TodoList\n            hasError={hasError}\n            errorMessage={errorMessage}\n            setHasError={setHasError}\n          />\n        )}\n    </div>\n  );\n});\n","import './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport React from 'react';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { Todos } from './components/Todos';\nimport { TodosProvider } from './components/TodosContext';\n\nReactDOM.render(\n  <TodosProvider>\n    <HashRouter>\n      <Routes>\n        <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n\n          <Route index element={<Todos />} />\n          <Route path=\":filter\" element={<Todos />} />\n        </Route>\n      </Routes>\n    </HashRouter>\n  </TodosProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}